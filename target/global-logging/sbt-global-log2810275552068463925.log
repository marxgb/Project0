[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\marxb\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\marxb\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 103.0163ms
[debug]       Load.loadUnit: defsScala took 0.2754ms
[debug] [Loading] Scanning directory C:\Users\marxb\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\marxb\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.5242 ms
[debug]           Load.resolveProject(global-plugins) took 55.1903ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\marxb\.sbt\1.0\plugins, plugins: List(<none>))) took 93.9453ms
[debug] [Loading] Done in C:\Users\marxb\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 120.7159ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3283ms
[debug]     Load.loadUnit(file:/C:/Users/marxb/.sbt/1.0/plugins/, ...) took 233.874ms
[debug]   Load.apply: load took 471.1041ms
[debug]   Load.apply: resolveProjects took 7.3472ms
[debug]   Load.apply: finalTransforms took 58.9331ms
[debug]   Load.apply: config.delegates took 16.0342ms
[debug]   Load.apply: Def.make(settings)... took 444.8821ms
[debug]   Load.apply: structureIndex took 114.979ms
[debug]   Load.apply: mkStreams took 1.8523ms
[info] loading global plugins from C:\Users\marxb\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5927.4338ms
[debug]           Load.loadUnit: plugins took 24.0463ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\marxb\IdeaProjects\Project0\project
[debug]             Load.loadUnit: mkEval took 6.1273ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\marxb\IdeaProjects\Project0\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0798 ms
[info] loading settings for project project0-build from idea.sbt ...
[debug]               Load.resolveProject(project0-build) took 2.4644ms
[debug]             Load.loadTransitive: finalizeProject(Project(id project0-build, base: C:\Users\marxb\IdeaProjects\Project0\project, plugins: List(<none>))) took 3.9119ms
[debug] [Loading] Done in C:\Users\marxb\IdeaProjects\Project0\project, returning: (project0-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2004.3437ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.7914ms
[debug]         Load.loadUnit(file:/C:/Users/marxb/IdeaProjects/Project0/project/, ...) took 2034.914ms
[debug]       Load.apply: load took 2036.1551ms
[debug]       Load.apply: resolveProjects took 0.0928ms
[debug]       Load.apply: finalTransforms took 11.5241ms
[debug]       Load.apply: config.delegates took 0.3006ms
[debug]       Load.apply: Def.make(settings)... took 68.4691ms
[debug]       Load.apply: structureIndex took 21.5204ms
[debug]       Load.apply: mkStreams took 0.0017ms
[info] loading project definition from C:\Users\marxb\IdeaProjects\Project0\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3259.5678ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\marxb\IdeaProjects\Project0
[debug]       Load.loadUnit: mkEval took 0.2829ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\marxb\IdeaProjects\Project0, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7455 ms
[info] loading settings for project project0 from build.sbt ...
[debug]         Load.resolveProject(project0) took 27.6578ms
[debug]       Load.loadTransitive: finalizeProject(Project(id project0, base: C:\Users\marxb\IdeaProjects\Project0, plugins: List(<none>))) took 30.8745ms
[debug] [Loading] Done in C:\Users\marxb\IdeaProjects\Project0, returning: (project0)
[debug]     Load.loadUnit: loadedProjectsRaw took 715.8526ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.8279ms
[debug]   Load.loadUnit(file:/C:/Users/marxb/IdeaProjects/Project0/, ...) took 3991.9708ms
[debug] Load.apply: load took 3993.3357ms
[debug] Load.apply: resolveProjects took 0.0828ms
[debug] Load.apply: finalTransforms took 23.4262ms
[debug] Load.apply: config.delegates took 0.6985ms
[debug] Load.apply: Def.make(settings)... took 75.3953ms
[debug] Load.apply: structureIndex took 27.6189ms
[debug] Load.apply: mkStreams took 0.0018ms
[info] set current project to Project0 (in build file:/C:/Users/marxb/IdeaProjects/Project0/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64552 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64552, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Project0 (in build file:/C:/Users/marxb/IdeaProjects/Project0/)
[debug] > Exec(idea-shell, None, None)
